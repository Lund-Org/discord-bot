{"version":3,"sources":["reportWebVitals.js","components/Menu.tsx","API/cardsAPI.ts","pages/GachaHome/GachaHomeContext.tsx","components/CardListElement.tsx","pages/GachaHome/views/GachaHomeFilterView.tsx","components/Card.tsx","components/FusionDetails.tsx","pages/GachaHome/views/GachaHomeMobileView.tsx","pages/GachaHome/GachaHomeNavigation.tsx","pages/GachaHome/views/GachaHomeEmptyView.tsx","pages/GachaHome/views/GachaHomeWebView.tsx","pages/GachaHome/GachaHomeView.tsx","pages/GachaHome/index.tsx","API/ranksAPI.ts","components/Rank.tsx","components/RankList.tsx","pages/GachaRanks/index.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Menu","to","fetchAllCards","a","filters","myInit","method","headers","Accept","Promise","resolve","reject","fetch","encodeURI","JSON","stringify","response","json","catch","GachaHomeContext","React","createContext","gold","fusion","filterStars","search","updateFilters","cards","cardSelected","selectCard","filterPanelState","toggleFilterPanelState","useGachaHome","useContext","GachaHomeProvider","children","useState","state","updateState","updateCards","updateCardSelected","updateFilterPanelState","useEffect","level","length","providerParameters","card","Provider","value","CardListElement","className","onClick","document","getElementById","id","scrollIntoView","selectCardAction","isFusion","Array","from","map","item","index","name","options","GachaHomeFilterView","update","key","type","onChange","event","target","placeholder","opt","checked","Card","img","title","description","currentWidth","fontSize","style","updateStyle","ref","useRef","calculateFont","current","clientWidth","window","addEventListener","removeEventListener","backgroundImage","_","FusionDetails","fusionDependencies","fusionDependency","clickOnCard","GachaHomeMobileView","imageName","GachaHomeNavigation","mobile","filteredCards","filter","includes","GachaHomeEmptyView","GachaHomeWebView","GachaHomeView","GachaHome","isMobile","setMobile","checkWindowSize","innerWidth","fetchRanks","Rank","rank","getMedal","discord_id","currentLevel","currentXP","RankList","ranks","start","GachaRanks","isLoading","setLoader","updateRanks","top1","top2","top3","others","ReactDOM","render","StrictMode","path"],"mappings":"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","file":"static/js/main.22307248.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n  Link\r\n} from 'react-router-dom';\r\n\r\nexport const Menu = () => {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/ranks\">Leaderboard</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n","export const fetchAllCards = async ({ filters = {} }: gacha.AllCardsParams): Promise<gacha.CardType[]> => {\r\n  const myInit: RequestInit = {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    }\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`/api/cards?filters=${encodeURI(\r\n      JSON.stringify(filters)\r\n    )}`, myInit)\r\n      .then((response) => response.json())\r\n      .then(resolve)\r\n      .catch(reject);\r\n  })\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { fetchAllCards } from '../../API/cardsAPI';\r\n\r\n//-- Types\r\ntype Filters = {\r\n  gold: boolean;\r\n  fusion: boolean;\r\n  filterStars: string;\r\n  search: string;\r\n}\r\n\r\ntype GachaHomeContextProvider = {\r\n  filters: Filters;\r\n  updateFilters: React.Dispatch<React.SetStateAction<Filters>>\r\n  cards: gacha.CardType[];\r\n  cardSelected: gacha.CardType | null;\r\n  selectCard: (card: gacha.CardType|null) => void;\r\n  filterPanelState: boolean;\r\n  toggleFilterPanelState: () => void;\r\n};\r\ntype GachaHomeContextProps = {\r\n  children: JSX.Element|JSX.Element[]|null;\r\n};\r\n\r\n//-- Context declaration\r\n\r\nexport const GachaHomeContext = React.createContext<GachaHomeContextProvider>({\r\n  filters: {\r\n    gold: false,\r\n    fusion: false,\r\n    filterStars: 'all',\r\n    search: ''\r\n  },\r\n  updateFilters: () => null,\r\n  cards: [],\r\n  cardSelected: null,\r\n  selectCard: () => {},\r\n  filterPanelState: false,\r\n  toggleFilterPanelState: () => {}\r\n});\r\n\r\nexport const useGachaHome = (): GachaHomeContextProvider => useContext(GachaHomeContext);\r\n\r\n//-- Exposed Provider\r\nexport const GachaHomeProvider = ({\r\n  children,\r\n}: GachaHomeContextProps): JSX.Element => {\r\n  const [state, updateState] = useState({\r\n    gold: false,\r\n    fusion: false,\r\n    filterStars: 'all',\r\n    search: ''\r\n  })\r\n  const [cards, updateCards] = useState([] as gacha.CardType[])\r\n  const [cardSelected, updateCardSelected] = useState<gacha.CardType | null>(null)\r\n  const [filterPanelState, updateFilterPanelState] = useState(false)\r\n\r\n  useEffect(() => {\r\n    fetchAllCards({\r\n      filters: {\r\n        ...(state.filterStars === 'all' ? {} : { level: state.filterStars.length }),\r\n        search: state.search,\r\n        fusion: state.fusion\r\n      }\r\n    }).then((cards: gacha.CardType[]) => {\r\n      updateCards(cards);\r\n    })\r\n  }, [state.filterStars, state.search, state.fusion])\r\n\r\n  const providerParameters = {\r\n    filters: state,\r\n    updateFilters: updateState,\r\n    cards,\r\n    cardSelected,\r\n    selectCard: (card: gacha.CardType|null) => {\r\n      updateCardSelected(card)\r\n    },\r\n    filterPanelState,\r\n    toggleFilterPanelState: () => {\r\n      updateFilterPanelState(!filterPanelState)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <GachaHomeContext.Provider value={providerParameters}>\r\n      {children}\r\n    </GachaHomeContext.Provider>\r\n  );\r\n};\r\n","import { useGachaHome } from \"../pages/GachaHome/GachaHomeContext\"\r\n\r\ntype CardListElementProps = {\r\n  card: gacha.CardType\r\n}\r\n\r\nexport const CardListElement = ({ card }: CardListElementProps) => {\r\n  const { selectCard } = useGachaHome()\r\n\r\n  const selectCardAction = () => {\r\n    selectCard(card)\r\n    document.getElementById(`card_${card.id}`)?.scrollIntoView()\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-list-item\" onClick={() => selectCardAction()}>\r\n      <span className=\"fusion-icon\">\r\n        {card.isFusion ? <i className=\"fas fa-atom\"></i> : null}\r\n      </span>\r\n      <span className=\"level-icon\">\r\n        {Array.from(Array(card.level)).map((item, index) => (\r\n          <i className=\"fas fa-star fa-xs\" key={index}></i>\r\n        ))}\r\n      </span>\r\n      <span className=\"card-name\">#{card.id} - {card.name}</span>\r\n    </div>\r\n  );\r\n}\r\n","import { useGachaHome } from \"../GachaHomeContext\"\r\n\r\nconst options = [\r\n  'all',\r\n  '*',\r\n  '**',\r\n  '***',\r\n  '****'\r\n]\r\n\r\nexport const GachaHomeFilterView = () => {\r\n  const { filters, updateFilters } = useGachaHome()\r\n\r\n  const update = (key: string, value: unknown) => {\r\n    updateFilters({\r\n      ...filters,\r\n      [key]: value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"home-filter-view\">\r\n      <div className=\"home-filter-group\">\r\n        <input type=\"text\"\r\n          onChange={(event) => update('search', event.target.value)}\r\n          value={filters.search}\r\n          placeholder=\"Recherche\" />\r\n      </div>\r\n      <div className=\"home-filter-group\">\r\n        <label>Nombre d'étoiles : </label>\r\n        <select\r\n          value={filters.filterStars}\r\n          onChange={(event) => update('filterStars', event.target.value)}\r\n        >\r\n          {options.map((opt, index) => (\r\n            <option value={opt} key={index}>{opt}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"home-filter-group\">\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            onChange={() => update('gold', !filters.gold)}\r\n            checked={filters.gold} />\r\n          Visualiser les cartes en dorée\r\n        </label>\r\n      </div>\r\n      <div className=\"home-filter-group\">\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            onChange={() => update('fusion', !filters.fusion)}\r\n            checked={filters.fusion} />\r\n          Cartes fusions uniquement\r\n        </label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useState, useRef } from \"react\";\r\n\r\ntype CardProps = {\r\n  id: number;\r\n  img: string;\r\n  title: string;\r\n  type: 'basic' | 'gold';\r\n  description: string;\r\n  level: number;\r\n  className?: string;\r\n  isFusion?: boolean;\r\n}\r\n\r\nconst Card = ({ id, img, title, description, level, type = 'basic', isFusion = false, className = '' }: CardProps) => {\r\n  const [style, updateStyle] = useState({ currentWidth: 0, fontSize: '40px' });\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    const calculateFont = () => {\r\n      if (ref.current && style.currentWidth !== ref.current.clientWidth) {\r\n        updateStyle({\r\n          currentWidth: ref.current.clientWidth,\r\n          fontSize: `${40 * ref.current.clientWidth / 475}px`\r\n        })\r\n      }\r\n    }\r\n\r\n    calculateFont();\r\n    window.addEventListener('resize', calculateFont);\r\n    return () => {\r\n      window.removeEventListener('resize', calculateFont);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div ref={ref} className={`${className} ${type} card-container`} style={{ fontSize: style.fontSize }}>\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          {isFusion ? <div className=\"card-fusion\">Fusion</div> : null}\r\n          <div className=\"card-id\">#{id}</div>\r\n        </div>\r\n        <div className=\"card-img\" style={{ backgroundImage: `url(\"/images${img}\")` }}></div>\r\n        <div className=\"card-title\">\r\n          {title}\r\n        </div>\r\n        <div className=\"card-separator\">\r\n          <div className=\"card-line\"></div>\r\n        </div>\r\n        <div className=\"card-description\">{description}</div>\r\n        <div className=\"card-stars\">\r\n          {[...Array(level)].map((_, index) => (\r\n            <div className=\"card-star\" key={index}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { useGachaHome } from \"../pages/GachaHome/GachaHomeContext\";\r\nimport { CardListElement } from \"./CardListElement\";\r\n\r\nconst FusionDetails = ({ card }: { card: gacha.CardType }) => {\r\n  const {\r\n    selectCard,\r\n  } = useGachaHome();\r\n  const clickOnCard = (card: gacha.CardType) => {\r\n    selectCard(card);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"fusion-dependencies\">\r\n      <h5>Composants pour la fusion :</h5>\r\n      <ul className=\"fusion-details\">\r\n        {card.fusionDependencies.map((fusionDependency, index) => (\r\n          <li key={index} onClick={() => clickOnCard(fusionDependency)}>\r\n            <CardListElement card={fusionDependency} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FusionDetails;\r\n","import Card from \"../../../components/Card\";\r\nimport FusionDetails from \"../../../components/FusionDetails\";\r\nimport { useGachaHome } from \"../GachaHomeContext\";\r\n\r\nexport const GachaHomeMobileView = () => {\r\n  const { cardSelected, filters } = useGachaHome();\r\n\r\n  if (!cardSelected) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"gacha-home-mobile-view\">\r\n      <div className=\"gacha-home-mobile-view-card-block\">\r\n        <Card\r\n          className={`scale-horizontally quarter ${filters.gold ? \"gold\" : \"\"}`}\r\n          id={cardSelected.id}\r\n          img={cardSelected.imageName}\r\n          title={cardSelected.name}\r\n          description={cardSelected.description}\r\n          level={cardSelected.level}\r\n          isFusion={cardSelected.isFusion}\r\n          type={filters.gold ? \"gold\" : \"basic\"}\r\n        />\r\n      </div>\r\n      {\r\n        cardSelected.isFusion ? (\r\n          <FusionDetails card={cardSelected} />\r\n        ) : null\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import { CardListElement } from \"../../components/CardListElement\";\r\nimport { useGachaHome } from \"./GachaHomeContext\";\r\nimport { GachaHomeFilterView } from \"./views/GachaHomeFilterView\";\r\nimport { GachaHomeMobileView } from \"./views/GachaHomeMobileView\";\r\n\r\ntype Props = {\r\n  mobile: boolean;\r\n};\r\n\r\nexport const GachaHomeNavigation = ({ mobile }: Props) => {\r\n  const {\r\n    cardSelected,\r\n    filterPanelState,\r\n    toggleFilterPanelState,\r\n    cards,\r\n    filters,\r\n    selectCard,\r\n  } = useGachaHome();\r\n\r\n  const filteredCards = cards\r\n    .filter((card) => (filters.fusion ? card.isFusion : true))\r\n    .filter((card) =>\r\n      filters.search ? card.name.includes(filters.search) : true\r\n    )\r\n    .filter((card) =>\r\n      filters.filterStars !== \"all\"\r\n        ? card.level === filters.filterStars.length\r\n        : true\r\n    );\r\n\r\n  const toggleFilter = () => {\r\n    toggleFilterPanelState();\r\n    if (mobile && !filterPanelState) {\r\n      selectCard(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`home-navigation ${mobile ? \"mobile-navigation\" : \"\"}`}>\r\n      <div className=\"filters-section\">\r\n        <h4 onClick={toggleFilter}>\r\n          <i className=\"fas fa-bars\"></i>\r\n          <span>Filtres</span>\r\n        </h4>\r\n        <div className={`filter-${filterPanelState ? \"opened\" : \"closed\"}`}>\r\n          {filterPanelState ? <GachaHomeFilterView /> : null}\r\n        </div>\r\n      </div>\r\n      <ul>\r\n        {filteredCards.map((card, index) => (\r\n          <li key={index} id={`card_${card.id}`}>\r\n            <CardListElement card={card} />\r\n            {mobile && cardSelected?.id === card.id ? (\r\n              <GachaHomeMobileView />\r\n            ) : null}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","export const GachaHomeEmptyView = () => (\r\n  <div className=\"home-empty-view\">\r\n    <div className=\"filter-arrow\">\r\n      <i className=\"fas fa-level-up-alt fa-rotate-270 fa-2x\"></i>\r\n    </div>\r\n    <div className=\"filter-text\">Filtre</div>\r\n    <div className=\"pick-card-text\">Choisis une carte</div>\r\n    <div className=\"pick-card-arrow\">\r\n      <i className=\"fas fa-level-down-alt fa-rotate-90 fa-2x\"></i>\r\n    </div>\r\n    <div className=\"details-text\">\r\n      <i className=\"fas fa-info-circle\"></i>\r\n      Les détails apparaitront ici\r\n    </div>\r\n  </div>\r\n);\r\n","import Card from \"../../../components/Card\";\r\nimport FusionDetails from \"../../../components/FusionDetails\";\r\nimport { useGachaHome } from \"../GachaHomeContext\";\r\nimport { GachaHomeEmptyView } from \"./GachaHomeEmptyView\";\r\n\r\nexport const GachaHomeWebView = () => {\r\n  const {\r\n    cardSelected,\r\n    filters,\r\n    updateFilters,\r\n  } = useGachaHome();\r\n\r\n  if (!cardSelected) {\r\n    return <GachaHomeEmptyView />\r\n  }\r\n\r\n  return (\r\n    <div className=\"gacha-home-web-view\">\r\n      <div className=\"gacha-home-web-view-card-block\">\r\n        <Card\r\n          className={`scale-horizontally quarter ${filters.gold ? \"gold\" : \"\"}`}\r\n          id={cardSelected.id}\r\n          img={cardSelected.imageName}\r\n          title={cardSelected.name}\r\n          description={cardSelected.description}\r\n          level={cardSelected.level}\r\n          isFusion={cardSelected.isFusion}\r\n          type={filters.gold ? \"gold\" : \"basic\"}\r\n        />\r\n      </div>\r\n      <div className=\"flex-centered pad-y-10\">\r\n        <label className=\"switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={() => updateFilters({ ...filters, gold: !filters.gold })}\r\n            checked={filters.gold}\r\n          />\r\n          <span className=\"slider round\"></span>\r\n        </label>\r\n        <span>Visualiser en or</span>\r\n      </div>\r\n      {\r\n        cardSelected.isFusion ? (\r\n          <FusionDetails card={cardSelected} />\r\n        ) : null\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import { useGachaHome } from \"./GachaHomeContext\"\r\nimport { GachaHomeEmptyView } from \"./views/GachaHomeEmptyView\"\r\nimport { GachaHomeWebView } from \"./views/GachaHomeWebView\"\r\n\r\ntype Props = {\r\n  mobile: boolean;\r\n}\r\n\r\nexport const GachaHomeView = ({ mobile }: Props) => {\r\n  const { cardSelected } = useGachaHome()\r\n\r\n  if (mobile) {\r\n    return null\r\n  }\r\n\r\n  return cardSelected ? <GachaHomeWebView /> : <GachaHomeEmptyView />\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { GachaHomeProvider } from './GachaHomeContext';\r\nimport { GachaHomeNavigation } from './GachaHomeNavigation'\r\nimport { GachaHomeView } from './GachaHomeView'\r\nimport \"./GachaHome.css\";\r\n\r\nconst GachaHome = (): JSX.Element => {\r\n  const [isMobile, setMobile] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    function checkWindowSize() {\r\n      setMobile(window.innerWidth <= 600)\r\n    }\r\n\r\n    checkWindowSize();\r\n    window.addEventListener('resize', checkWindowSize);\r\n    return () => {\r\n      window.removeEventListener('resize', checkWindowSize);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"gacha-home\">\r\n      <GachaHomeProvider>\r\n        <GachaHomeNavigation mobile={isMobile} />\r\n        <GachaHomeView mobile={isMobile} />\r\n      </GachaHomeProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GachaHome\r\n","export const fetchRanks = async (): Promise<gacha.Rank[]> => {\r\n  const myInit: RequestInit = {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    }\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch('/api/ranks', myInit)\r\n      .then((response) => response.json())\r\n      .then(resolve)\r\n      .catch(reject);\r\n  })\r\n}\r\n","type RankProps = {\r\n  rank: gacha.Rank;\r\n  level: number;\r\n}\r\n\r\nconst Rank = ({ rank, level }: RankProps) => {\r\n  const getMedal = () => {\r\n    switch (level) {\r\n      case 1:\r\n        return '🥇'\r\n      case 2:\r\n        return '🥈'\r\n      default:\r\n        return '🥉'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`rank-item top-${level}`}>\r\n      <div className=\"rank-medal-icon\">{getMedal()}</div>\r\n      <div className=\"rank-username\">{rank.discord_id}</div>\r\n      <div className=\"rank-level\">Niveau : {rank.level.currentLevel}</div>\r\n      <div className=\"rank-xp\">XP : {rank.currentXP}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Rank\r\n","type RankListProps = {\r\n  ranks: gacha.Rank[];\r\n}\r\n\r\nconst RankList = ({ ranks }: RankListProps) => {\r\n  return (\r\n    <ol start={4}>\r\n      {\r\n        ranks.map((rank) => (\r\n          <li><strong>{rank.discord_id}</strong>, niveau {rank.level.currentLevel} avec {rank.currentXP}xp</li>\r\n        ))\r\n      }\r\n    </ol>\r\n  )\r\n}\r\n\r\nexport default RankList\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchRanks } from \"../../API/ranksAPI\";\r\nimport Rank from \"../../components/Rank\";\r\nimport RankList from \"../../components/RankList\";\r\nimport \"./GachaRanks.css\";\r\n\r\nconst GachaRanks = () => {\r\n  const [isLoading, setLoader] = useState(true)\r\n  const [ranks, updateRanks] = useState([] as gacha.Rank[])\r\n\r\n  useEffect(() => {\r\n    fetchRanks().then((ranks: gacha.Rank[]) => {\r\n      updateRanks(ranks)\r\n      setLoader(false)\r\n    })\r\n  }, [])\r\n\r\n  if (isLoading) {\r\n    return 'Loading'\r\n  }\r\n\r\n  const [top1, top2, top3, ...others] = ranks;\r\n\r\n  return (\r\n    <div className=\"gacha-ranks\">\r\n      <div className=\"gacha-top-ranks\">\r\n        <Rank rank={top1} level={1} />\r\n        <Rank rank={top2} level={2} />\r\n        <Rank rank={top3} level={3} />\r\n      </div>\r\n      <div className=\"gacha-rank-list\">\r\n        <RankList ranks={others} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GachaRanks\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\nimport './styles/index.css';\r\nimport './styles/helper.css';\r\nimport './styles/card.css';\r\nimport './styles/rank.css';\r\nimport './styles/menu.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Menu } from './components/Menu';\r\nimport GachaHome from './pages/GachaHome';\r\nimport GachaRanks from './pages/GachaRanks';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Menu />\r\n      <Switch>\r\n        <Route path=\"/ranks\">\r\n          <GachaRanks />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <GachaHome />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}