{"version":3,"sources":["components/Card.tsx","components/Config.tsx","components/CardModal.tsx","API/cardsAPI.ts","components/App.tsx","reportWebVitals.js","index.js"],"names":["Card","id","img","title","description","level","type","isFusion","className","useState","currentWidth","fontSize","style","updateStyle","ref","useRef","useEffect","calculateFont","current","clientWidth","window","addEventListener","removeEventListener","backgroundImage","Array","map","_","index","options","Config","state","updateState","update","key","value","checked","gold","onChange","filterStars","event","target","opt","CardModal","card","selectDependency","closeModal","onClick","imageName","name","fusionDependencies","length","fusionDep","e","stopPropagation","fetchAllCards","a","filters","myInit","method","headers","Accept","Promise","resolve","reject","fetch","encodeURI","JSON","stringify","then","response","json","catch","stopBodyScroll","document","body","overflow","App","search","cards","updateCards","cardSelected","updateCardSelected","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ea9c496.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\ntype CardProps = {\r\n  id: number;\r\n  img: string;\r\n  title: string;\r\n  type: 'basic' | 'gold';\r\n  description: string;\r\n  level: number;\r\n  className?: string;\r\n  isFusion?: boolean;\r\n}\r\n\r\nconst Card = ({ id, img, title, description, level, type = 'basic', isFusion = false, className = '' }: CardProps) => {\r\n  const [style, updateStyle] = useState({ currentWidth: 0, fontSize: '40px' });\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    const calculateFont = () => {\r\n      if (ref.current && style.currentWidth !== ref.current.clientWidth) {\r\n        updateStyle({\r\n          currentWidth: ref.current.clientWidth,\r\n          fontSize: `${40 * ref.current.clientWidth / 475}px`\r\n        })\r\n      }\r\n    }\r\n\r\n    calculateFont();\r\n    window.addEventListener('resize', calculateFont);\r\n    return () => {\r\n      window.removeEventListener('resize', calculateFont);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div ref={ref} className={`${className} ${type} card-container`} style={{ fontSize: style.fontSize }}>\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          {isFusion ? <div className=\"card-fusion\">Fusion</div> : null}\r\n          <div className=\"card-id\">#{id}</div>\r\n        </div>\r\n        <div className=\"card-img\" style={{ backgroundImage: `url(\"/images${img}\")` }}></div>\r\n        <div className=\"card-title\">\r\n          {title}\r\n        </div>\r\n        <div className=\"card-separator\">\r\n          <div className=\"card-line\"></div>\r\n        </div>\r\n        <div className=\"card-description\">{description}</div>\r\n        <div className=\"card-stars\">\r\n          {[...Array(level)].map((_, index) => (\r\n            <div className=\"card-star\" key={index}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","type State = {\r\n  gold: boolean;\r\n  filterStars: string;\r\n  search: string;\r\n}\r\n\r\ntype Props = {\r\n  state: State;\r\n  updateState: React.Dispatch<React.SetStateAction<State>>;\r\n}\r\n\r\nconst options = [\r\n  'all',\r\n  '*',\r\n  '**',\r\n  '***',\r\n  '****'\r\n]\r\n\r\nconst Config = ({ state, updateState }: Props) => {\r\n  const update = (key: string, value: any) => {\r\n    updateState({ ...state, [key]: value })\r\n  }\r\n\r\n  return (\r\n    <div className=\"config\">\r\n      <div>\r\n        <span>Pr√©visualisation en or :</span>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={state.gold}\r\n          onChange={() => update('gold', !state.gold)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>Filtrer par niveau :</span>\r\n        <select\r\n          value={state.filterStars}\r\n          onChange={(event) => update('filterStars', event.target.value)}\r\n        >\r\n          {options.map((opt, index) => (\r\n            <option value={opt} key={index}>{opt}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <span>Recherche :</span>\r\n        <input type=\"text\" onChange={(event) => update('search', event.target.value)} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Config\r\n","import Card from \"./Card\"\r\n\r\ntype CardModalProps = {\r\n  card: gatcha.CardType;\r\n  type: 'basic' | 'gold';\r\n  selectDependency: (card: gatcha.CardType) => void;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst CardModal = ({ card, type, selectDependency, closeModal }: CardModalProps) => {\r\n  return (\r\n    <div className=\"card-modal\" onClick={closeModal}>\r\n      <div className=\"card-modal-container\">\r\n        <Card\r\n          type={type}\r\n          className={`${type} big scale-vertically`}\r\n          id={card.id}\r\n          img={card.imageName}\r\n          title={card.name}\r\n          description={card.description}\r\n          level={card.level}\r\n          isFusion={card.isFusion}\r\n        />\r\n      </div>\r\n      {card?.fusionDependencies?.length ? (\r\n        <div className=\"card-modal-dependencies\">\r\n          {card.fusionDependencies.map((fusionDep) => (\r\n            <div onClick={(e) => {\r\n              e.stopPropagation()\r\n              selectDependency(fusionDep)\r\n            }}>\r\n              <Card\r\n                type={type}\r\n                className={`${type} quarter scale-vertically`}\r\n                id={fusionDep.id}\r\n                img={fusionDep.imageName}\r\n                title={fusionDep.name}\r\n                description={fusionDep.description}\r\n                level={fusionDep.level}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardModal;\r\n","export const fetchAllCards = async ({ filters = {} }: gatcha.AllCardsParams): Promise<gatcha.CardType[]> => {\r\n  const myInit: RequestInit = {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    }\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`/cards?filters=${encodeURI(\r\n      JSON.stringify(filters)\r\n    )}`, myInit)\r\n      .then((response) => response.json())\r\n      .then(resolve)\r\n      .catch(reject);\r\n  })\r\n}\r\n","import { useEffect, useState } from 'react';\nimport Card from './Card'\nimport Config from './Config'\nimport CardModal from './CardModal'\nimport { fetchAllCards } from '../API/cardsAPI';\n\nfunction stopBodyScroll() {\n  document.body.style.overflow = 'hidden';\n}\n\nfunction enableBodyScroll() {\n  document.body.style.overflow = 'auto';\n}\n\nconst App = () => {\n  const [state, updateState] = useState({\n    gold: false,\n    filterStars: 'all',\n    search: ''\n  })\n  const [cards, updateCards] = useState([] as gatcha.CardType[])\n  const [cardSelected, updateCardSelected] = useState<gatcha.CardType | null>(null)\n\n  useEffect(() => {\n    fetchAllCards({\n      filters: {\n        ...(state.filterStars === 'all' ? {} : { level: state.filterStars.length }),\n        search: state.search\n      }\n    }).then((cards: gatcha.CardType[]) => {\n      updateCards(cards);\n    })\n  }, [state.filterStars, state.search])\n\n  return (\n    <div className=\"app-container\">\n      <Config state={state} updateState={updateState} />\n      <div className=\"cards-container\">\n        {cards.map((card, index) => (\n          <div\n            key={index}\n            onClick={() => {\n              stopBodyScroll()\n              updateCardSelected(card)\n            }}\n          >\n            <Card\n              className={`scale-horizontally quarter ${state.gold ? 'gold' : ''}`}\n              id={card.id}\n              img={card.imageName}\n              title={card.name}\n              description={card.description}\n              level={card.level}\n              isFusion={card.isFusion}\n              type={state.gold ? 'gold' : 'basic'}\n            />\n          </div>\n        ))}\n      </div>\n      {cardSelected ? (\n        <CardModal\n          card={cardSelected}\n          type={state.gold ? 'gold' : 'basic'}\n          selectDependency={(card: gatcha.CardType) => {\n            stopBodyScroll()\n            updateCardSelected(card)\n          }}\n          closeModal={() => {\n            enableBodyScroll()\n            updateCardSelected(null)\n          }}\n        />\n      ) : null }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/config.css';\nimport './styles/card.css';\nimport './styles/card-modal.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}