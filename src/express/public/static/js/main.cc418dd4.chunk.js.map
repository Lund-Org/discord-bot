{"version":3,"sources":["components/Card.tsx","components/Config.tsx","components/CardModal.tsx","API/cardsAPI.ts","components/App.tsx","reportWebVitals.js","index.js"],"names":["Card","id","img","title","description","level","type","className","style","backgroundImage","Array","map","_","index","options","Config","state","updateState","update","key","value","checked","gold","onChange","filterStars","event","target","opt","CardModal","card","selectDependency","closeModal","onClick","imageName","name","fusionDependencies","length","fusionDep","e","stopPropagation","fetchAllCards","a","filters","myInit","method","headers","Accept","Promise","resolve","reject","fetch","encodeURI","JSON","stringify","then","response","json","catch","stopBodyScroll","document","body","overflow","App","useState","search","cards","updateCards","cardSelected","updateCardSelected","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cc418dd4.chunk.js","sourcesContent":["type CardProps = {\r\n  id: number;\r\n  img: string;\r\n  title: string;\r\n  type: 'basic' | 'gold';\r\n  description: string;\r\n  level: number;\r\n  className?: string;\r\n}\r\n\r\nconst Card = ({ id, img, title, description, level, type = 'basic', className = '' }: CardProps) => {\r\n  return (\r\n    <div className={`${className} ${type} card`}>\r\n      <div className=\"card-id\">#{id}</div>\r\n      <div className=\"card-img\" style={{ backgroundImage: `url(\"/images${img}\")` }}></div>\r\n      <div className=\"card-title\">{title}</div>\r\n      <div className=\"card-separator\">\r\n        <div className=\"card-line\"></div>\r\n      </div>\r\n      <div className=\"card-description\">{description}</div>\r\n      <div className=\"card-stars\">\r\n        {[...Array(level)].map((_, index) => (\r\n          <div className=\"card-star\" key={index}></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","type State = {\r\n  gold: boolean;\r\n  filterStars: string;\r\n  search: string;\r\n}\r\n\r\ntype Props = {\r\n  state: State;\r\n  updateState: React.Dispatch<React.SetStateAction<State>>;\r\n}\r\n\r\nconst options = [\r\n  'all',\r\n  '*',\r\n  '**',\r\n  '***',\r\n  '****'\r\n]\r\n\r\nconst Config = ({ state, updateState }: Props) => {\r\n  const update = (key: string, value: any) => {\r\n    updateState({ ...state, [key]: value })\r\n  }\r\n\r\n  return (\r\n    <div className=\"config\">\r\n      <div>\r\n        <span>Pr√©visualisation en or :</span>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={state.gold}\r\n          onChange={() => update('gold', !state.gold)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>Filtrer par niveau :</span>\r\n        <select\r\n          value={state.filterStars}\r\n          onChange={(event) => update('filterStars', event.target.value)}\r\n        >\r\n          {options.map((opt, index) => (\r\n            <option value={opt} key={index}>{opt}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <span>Recherche :</span>\r\n        <input type=\"text\" onChange={(event) => update('search', event.target.value)} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Config\r\n","import Card from \"./Card\"\r\n\r\ntype CardModalProps = {\r\n  card: gatcha.CardType;\r\n  type: 'basic' | 'gold';\r\n  selectDependency: (card: gatcha.CardType) => void;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst CardModal = ({ card, type, selectDependency, closeModal }: CardModalProps) => {\r\n  return (\r\n    <div className=\"card-modal\" onClick={closeModal}>\r\n      <div className=\"card-modal-container\">\r\n        <Card\r\n          type={type}\r\n          className={`${type} big`}\r\n          id={card.id}\r\n          img={card.imageName}\r\n          title={card.name}\r\n          description={card.description}\r\n          level={card.level}\r\n        />\r\n      </div>\r\n      {card?.fusionDependencies?.length ? (\r\n        <div className=\"card-modal-dependencies\">\r\n          {card.fusionDependencies.map((fusionDep) => (\r\n            <div onClick={(e) => {\r\n              e.stopPropagation()\r\n              selectDependency(fusionDep)\r\n            }}>\r\n              <Card\r\n                type={type}\r\n                className={`${type} quarter`}\r\n                id={fusionDep.id}\r\n                img={fusionDep.imageName}\r\n                title={fusionDep.name}\r\n                description={fusionDep.description}\r\n                level={fusionDep.level}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardModal;\r\n","export const fetchAllCards = async ({ filters = {} }: gatcha.AllCardsParams): Promise<gatcha.CardType[]> => {\r\n  const myInit: RequestInit = {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: \"application/json\",\r\n    }\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`/cards?filters=${encodeURI(\r\n      JSON.stringify(filters)\r\n    )}`, myInit)\r\n      .then((response) => response.json())\r\n      .then(resolve)\r\n      .catch(reject);\r\n  })\r\n}\r\n","import { useEffect, useState } from 'react';\nimport Card from './Card'\nimport Config from './Config'\nimport CardModal from './CardModal'\nimport { fetchAllCards } from '../API/cardsAPI';\n\nfunction stopBodyScroll() {\n  document.body.style.overflow = 'hidden';\n}\n\nfunction enableBodyScroll() {\n  document.body.style.overflow = 'auto';\n}\n\nconst App = () => {\n  const [state, updateState] = useState({\n    gold: false,\n    filterStars: 'all',\n    search: ''\n  })\n  const [cards, updateCards] = useState([] as gatcha.CardType[])\n  const [cardSelected, updateCardSelected] = useState<gatcha.CardType | null>(null)\n\n  useEffect(() => {\n    fetchAllCards({\n      filters: {\n        ...(state.filterStars === 'all' ? {} : { level: state.filterStars.length }),\n        search: state.search\n      }\n    }).then((cards: gatcha.CardType[]) => {\n      updateCards(cards);\n    })\n  }, [state.filterStars, state.search])\n\n  return (\n    <div className=\"app-container\">\n      <Config state={state} updateState={updateState} />\n      <div className=\"cards-container\">\n        {cards.map((card, index) => (\n          <div\n            key={index}\n            onClick={() => {\n              stopBodyScroll()\n              updateCardSelected(card)\n            }}\n          >\n            <Card\n              className={`half ${state.gold ? 'gold' : ''}`}\n              id={card.id}\n              img={card.imageName}\n              title={card.name}\n              description={card.description}\n              level={card.level}\n              type={state.gold ? 'gold' : 'basic'}\n            />\n          </div>\n        ))}\n      </div>\n      {cardSelected ? (\n        <CardModal\n          card={cardSelected}\n          type={state.gold ? 'gold' : 'basic'}\n          selectDependency={(card: gatcha.CardType) => {\n            stopBodyScroll()\n            updateCardSelected(card)\n          }}\n          closeModal={() => {\n            enableBodyScroll()\n            updateCardSelected(null)\n          }}\n        />\n      ) : null }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/config.css';\nimport './styles/card.css';\nimport './styles/card-modal.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}